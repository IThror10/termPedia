plugins {
    id 'java'
    id 'application'

    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.springframework.boot' version '3.0.2'

    id 'io.qameta.allure-aggregate-report' version '2.11.1'
    id 'io.qameta.allure-adapter' version '2.11.1'
}


repositories {
    mavenCentral()
}

run.standardInput = System.in
run.configure {
    environment "QueryFactory", queryDBMS
    environment "CommandFactory", commandDBMS
}

application {
    mainClass = 'com.TermPedia.WebMain'
}


def blModule = project(':modules:BL')
def dbModule = project(':modules:DB')
def webModule = project(':modules:WEB')

configure([blModule, dbModule, webModule]) {
    apply(plugin: 'java')
    apply(plugin: 'idea')
    apply(plugin: 'io.spring.dependency-management')
    apply(plugin: 'io.qameta.allure-adapter')

    sourceCompatibility = JavaVersion.VERSION_18

    dependencyManagement {
        imports {
            mavenBom 'org.springframework.boot:spring-boot-dependencies:2.5.4'
        }
    }

    allure {
        adapter {
            frameworks {
                junit5
                junit4
            }
        }
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        implementation 'org.jetbrains:annotations:23.0.0'

        testImplementation 'net.bytebuddy:byte-buddy:1.12.20'
        testImplementation 'org.junit.jupiter:junit-jupiter'
        testImplementation 'org.mockito:mockito-inline:4.10.0'
        testImplementation 'org.mockito:mockito-junit-jupiter:4.10.0'

        testImplementation 'io.qameta.allure:allure-junit5:2.12.1'
        testImplementation 'io.qameta.allure:allure-commandline:2.12.1'
        testImplementation 'io.qameta.allure:allure-assertj:2.12.1'
        testImplementation 'io.qameta.allure:allure-rest-assured:2.12.1'
        testImplementation 'io.qameta.allure:allure-java-commons:2.12.1'
    }

    test {
        useJUnitPlatform()
    }
}

configure([dbModule, webModule]) {
    dependencies {
        implementation project(':modules:BL')
    }
}

configure([webModule]) {
    apply(plugin: 'org.springframework.boot')
    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
        implementation 'org.springframework.boot:spring-boot-starter-security'

        implementation "io.jsonwebtoken:jjwt-api:0.11.1"
        implementation "io.jsonwebtoken:jjwt-impl:0.11.1"
        implementation "io.jsonwebtoken:jjwt-jackson:0.11.1"

        compileOnly 'org.projectlombok:lombok:1.18.24'

        developmentOnly 'org.springframework.boot:spring-boot-devtools'
        testImplementation 'org.springframework.boot:spring-boot-starter-test'
    }

    bootRun.configure {
        mainClass = 'com.TermPedia.WebMain'
    }
}

configurations.allureAggregateReport.dependencies.clear()
dependencies {
    implementation blModule
    implementation dbModule
    implementation webModule

    implementation 'org.springframework.boot:spring-boot-starter'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'

    allureAggregateReport blModule
    allureAggregateReport dbModule
//    allureAggregateReport webModule
    allureAggregateReport project
}

tasks.create("unitTests").configure {
    dependsOn(dbModule.test)
    dependsOn(blModule.test)
}

tasks.create("createAllureReport") {
    allureAggregateReport.configure {
        setProperty("clean", true)
    }

    finalizedBy(allureAggregateReport)
}


apply from: "modules/DB/build.gradle"
testing {
    suites {
        withType(JvmTestSuite).matching { it.name in ['integrationTests'] }.configureEach {
            dependencies {
                implementation blModule
                implementation dbModule

            }

            targets {
                all {
                    testTask.configure {
                        dependsOn(initTestCommandDB)
                        dependsOn(initTestQueryDB)

                        finalizedBy(dropTestCommandDB)
                        finalizedBy(dropTestQueryDB)

                    }
                }
            }
        }

        task integrationTests(JvmTestSuite) {
            useJUnitJupiter()
        }
    }
}

check.dependsOn(integrationTests)
integrationTests.mustRunAfter(test)
test.configure {
    mustRunAfter(blModule.check)
    mustRunAfter(dbModule.check)
    mustRunAfter(webModule.check)
}