import dbTasks.*

var dir = "$rootDir/modules/DB/src/main/sql/"
var postgresCommandUrl = postgresUrl + "$System.env.COMMAND_HOST:$System.env.COMMAND_PORT/"
var postgresQueryUrl = postgresUrl + "$System.env.QUERY_HOST:$System.env.QUERY_PORT/"

// Downloading drivers
task downloadPostgresDriver(type: DownloadDriver) {
    buildDrivers = configurations.driver
    driverName = postgresDriver
}

// Test Command DB Tasks
task createTestPostgresCommandDB(type: CreatePostgresDB, dependsOn: downloadPostgresDriver) {
    url = postgresCommandUrl
    username = postgresUsername
    password = postgresPassword
    driver = postgresDriver

    DBName = "Test" + commandDBName
}

task initTestPostgresCommandDB(type: ExecutePostgresScripts, dependsOn: createTestPostgresCommandDB) {
    url = postgresCommandUrl
    username = postgresUsername
    password = postgresPassword
    driver = postgresDriver
    dataBase = "Test" + commandDBName

    inputDir = dir + "commandDB"
    inputFiles = ["postgresInit.sql", "postgresFunctions.sql", "postgresTestRoles.sql", "testInsert.sql"]
}

task dropTestPostgresCommandDB(type: ExecutePostgresScripts, dependsOn: downloadPostgresDriver) {
    url = postgresCommandUrl
    username = postgresUsername
    password = postgresPassword
    driver = postgresDriver
    dataBase = null

    inputDir = dir + "commandDB"
    inputFiles = ["postgresTestDrop.sql"]
}

// Test Query DB Tasks
task createTestPostgresQueryDB(type: CreatePostgresDB, dependsOn: downloadPostgresDriver) {
    url = postgresQueryUrl
    username = postgresUsername
    password = postgresPassword
    driver = postgresDriver

    DBName = "Test" + queryDBName
}

task initTestPostgresQueryDB(type: ExecutePostgresScripts, dependsOn: createTestPostgresQueryDB) {
    url = postgresQueryUrl
    username = postgresUsername
    password = postgresPassword
    driver = postgresDriver

    dataBase = "Test" + queryDBName
    inputDir = dir + "queryDB"
    inputFiles = ["postgresInit.sql", "postgresFunctions.sql", "postgresProcedures.sql",
                  "postgresTestRoles.sql", "postgresTestInsert.sql"]
}

task dropTestPostgresQueryDB(type: ExecutePostgresScripts, dependsOn: downloadPostgresDriver) {
    url = postgresQueryUrl
    username = postgresUsername
    password = postgresPassword
    driver = postgresDriver
    dataBase = null

    inputDir = dir + "queryDB"
    inputFiles = ["postgresTestDrop.sql"]
}